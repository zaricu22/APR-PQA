
TOTAL: 38

1: -auto\
--- "a/C:\\Users\\UROS\\Documents\\GitHub\\APR-PQA\\0. Data_Sources\\scripts\\Chunk_And_Lines\\..\\ManyBugs_Result_19_VCXProjects\\angelix-gzip-884ef-buggy\\gzip.c"	
+++ "b/C:\\Users\\UROS\\Documents\\GitHub\\APR-PQA\\0. Data_Sources\\scripts\\Chunk_And_Lines\\..\\ManyBugs_Result_19_VCXProjects\\angelix-gzip-884ef-auto\\gzip.c"	
@@ -543,7 +543,7 @@ int main (int argc, char **argv)
                 program_name);
     }
 #endif
-    if ((z_len == 0 && !decompress) || z_len > MAX_SUFFIX) {
+    if ((z_len == 0)) {
         fprintf(stderr, "%s: incorrect suffix '%s'\n",
                 program_name, z_suffix);
         do_exit(ERROR);

2: -auto-1\
--- "a/C:\\Users\\UROS\\Documents\\GitHub\\APR-PQA\\0. Data_Sources\\scripts\\Chunk_And_Lines\\..\\ManyBugs_Result_19_VCXProjects\\angelix-gzip-884ef-buggy\\gzip.c"	
+++ "b/C:\\Users\\UROS\\Documents\\GitHub\\APR-PQA\\0. Data_Sources\\scripts\\Chunk_And_Lines\\..\\ManyBugs_Result_19_VCXProjects\\angelix-gzip-884ef-auto-1\\gzip.c"	
@@ -543,7 +543,7 @@ int main (int argc, char **argv)
                 program_name);
     }
 #endif
-    if ((z_len == 0 && !decompress) || z_len > MAX_SUFFIX) {
+    if ((decompress || (z_len > 30))) {
         fprintf(stderr, "%s: incorrect suffix '%s'\n",
                 program_name, z_suffix);
         do_exit(ERROR);

3: -manual\
--- "a/C:\\Users\\UROS\\Documents\\GitHub\\APR-PQA\\0. Data_Sources\\scripts\\Chunk_And_Lines\\..\\ManyBugs_Result_19_VCXProjects\\angelix-gzip-884ef-buggy\\gzip.c"	
+++ "b/C:\\Users\\UROS\\Documents\\GitHub\\APR-PQA\\0. Data_Sources\\scripts\\Chunk_And_Lines\\..\\ManyBugs_Result_19_VCXProjects\\angelix-gzip-884ef-manual\\gzip.c"	
@@ -543,11 +543,11 @@ int main (int argc, char **argv)
                 program_name);
     }
 #endif
-    if ((z_len == 0 && !decompress) || z_len > MAX_SUFFIX) {
-        fprintf(stderr, "%s: incorrect suffix '%s'\n",
-                program_name, z_suffix);
+    if (z_len == 0 || z_len > MAX_SUFFIX) {
+        fprintf(stderr, "%s: invalid suffix '%s'\n", program_name, z_suffix);
         do_exit(ERROR);
     }
+
     if (do_lzw && !decompress) work = lzw;
 
     /* Allocate all global buffers (for DYN_ALLOC option) */

4: -manual-1\
--- "a/C:\\Users\\UROS\\Documents\\GitHub\\APR-PQA\\0. Data_Sources\\scripts\\Chunk_And_Lines\\..\\ManyBugs_Result_19_VCXProjects\\angelix-gzip-884ef-buggy\\gzip.c"	
+++ "b/C:\\Users\\UROS\\Documents\\GitHub\\APR-PQA\\0. Data_Sources\\scripts\\Chunk_And_Lines\\..\\ManyBugs_Result_19_VCXProjects\\angelix-gzip-884ef-manual-1\\gzip.c"	
@@ -543,11 +543,11 @@ int main (int argc, char **argv)
                 program_name);
     }
 #endif
-    if ((z_len == 0 && !decompress) || z_len > MAX_SUFFIX) {
-        fprintf(stderr, "%s: incorrect suffix '%s'\n",
-                program_name, z_suffix);
+    if (z_len == 0 || z_len > MAX_SUFFIX) {
+        fprintf(stderr, "%s: invalid suffix '%s'\n", program_name, z_suffix);
         do_exit(ERROR);
     }
+
     if (do_lzw && !decompress) work = lzw;
 
     /* Allocate all global buffers (for DYN_ALLOC option) */

5: -auto\
--- "a/C:\\Users\\UROS\\Documents\\GitHub\\APR-PQA\\0. Data_Sources\\scripts\\Chunk_And_Lines\\..\\ManyBugs_Result_19_VCXProjects\\angelix-libtiff-2e42d-buggy\\tiffcrop.c"	
+++ "b/C:\\Users\\UROS\\Documents\\GitHub\\APR-PQA\\0. Data_Sources\\scripts\\Chunk_And_Lines\\..\\ManyBugs_Result_19_VCXProjects\\angelix-libtiff-2e42d-auto\\tiffcrop.c"	
@@ -4241,7 +4241,7 @@ computeInputPixelOffsets(struct crop_mask *crop, struct image_data *image,
   uint32 i, max_width, max_length, zwidth, zlength, buffsize;
   uint32 x1, x2, y1, y2;
 
-  if (image->res_unit != RESUNIT_INCH && image->res_unit != RESUNIT_CENTIMETER)
+  if (((image->res_unit != 3) && (image->res_unit != 3)))
     {
     xres = 1.0;
     yres = 1.0;

6: -manual\
--- "a/C:\\Users\\UROS\\Documents\\GitHub\\APR-PQA\\0. Data_Sources\\scripts\\Chunk_And_Lines\\..\\ManyBugs_Result_19_VCXProjects\\angelix-libtiff-2e42d-buggy\\tiffcrop.c"	
+++ "b/C:\\Users\\UROS\\Documents\\GitHub\\APR-PQA\\0. Data_Sources\\scripts\\Chunk_And_Lines\\..\\ManyBugs_Result_19_VCXProjects\\angelix-libtiff-2e42d-manual\\tiffcrop.c"	
@@ -4966,7 +4966,7 @@ loadImage(TIFF* in, struct image_data *image, struct dump_opts * dump, unsigned
   TIFFGetField(in, TIFFTAG_IMAGELENGTH, &length);
   TIFFGetField(in, TIFFTAG_XRESOLUTION, &xres);
   TIFFGetField(in, TIFFTAG_YRESOLUTION, &yres);
-  TIFFGetFieldDefaulted(in, TIFFTAG_RESOLUTIONUNIT, &res_unit);
+  TIFFGetField(in, TIFFTAG_RESOLUTIONUNIT, &res_unit);
   scanlinesize = TIFFScanlineSize(in);
 
   image->bps = bps;

7: -auto\
--- "a/C:\\Users\\UROS\\Documents\\GitHub\\APR-PQA\\0. Data_Sources\\scripts\\Chunk_And_Lines\\..\\ManyBugs_Result_19_VCXProjects\\angelix-libtiff-3edb9-buggy\\tif_dirread.c"	
+++ "b/C:\\Users\\UROS\\Documents\\GitHub\\APR-PQA\\0. Data_Sources\\scripts\\Chunk_And_Lines\\..\\ManyBugs_Result_19_VCXProjects\\angelix-libtiff-3edb9-auto\\tif_dirread.c"	
@@ -586,8 +586,7 @@ TIFFReadDirectory(TIFF* tif)
 		            _TIFFFieldWithTag(tif,TIFFTAG_STRIPBYTECOUNTS)->field_name);
 		if(EstimateStripByteCounts(tif, dir, dircount) < 0)
 		    goto bad;
-	} else if (td->td_nstrips > 1
-		   && td->td_compression == COMPRESSION_NONE
+	} else if (((td->td_nstrips > td->td_nstrips) && (td->td_compression == 1))
 		   && td->td_stripbytecount[0] != td->td_stripbytecount[1]) {
 		/*
 		 * XXX: Some vendors fill StripByteCount array with absolutely

8: -manual\
--- "a/C:\\Users\\UROS\\Documents\\GitHub\\APR-PQA\\0. Data_Sources\\scripts\\Chunk_And_Lines\\..\\ManyBugs_Result_19_VCXProjects\\angelix-libtiff-3edb9-buggy\\tif_dirread.c"	
+++ "b/C:\\Users\\UROS\\Documents\\GitHub\\APR-PQA\\0. Data_Sources\\scripts\\Chunk_And_Lines\\..\\ManyBugs_Result_19_VCXProjects\\angelix-libtiff-3edb9-manual\\tif_dirread.c"	
@@ -586,7 +586,7 @@ TIFFReadDirectory(TIFF* tif)
 		            _TIFFFieldWithTag(tif,TIFFTAG_STRIPBYTECOUNTS)->field_name);
 		if(EstimateStripByteCounts(tif, dir, dircount) < 0)
 		    goto bad;
-	} else if (td->td_nstrips > 1
+	} else if (td->td_nstrips > 2
 		   && td->td_compression == COMPRESSION_NONE
 		   && td->td_stripbytecount[0] != td->td_stripbytecount[1]) {
 		/*

9: -auto\
--- "a/C:\\Users\\UROS\\Documents\\GitHub\\APR-PQA\\0. Data_Sources\\scripts\\Chunk_And_Lines\\..\\ManyBugs_Result_19_VCXProjects\\angelix-libtiff-865f7-buggy\\tif_dirwrite.c"	
+++ "b/C:\\Users\\UROS\\Documents\\GitHub\\APR-PQA\\0. Data_Sources\\scripts\\Chunk_And_Lines\\..\\ManyBugs_Result_19_VCXProjects\\angelix-libtiff-865f7-auto\\tif_dirwrite.c"	
@@ -343,7 +343,7 @@ TIFFWriteDirectorySec(TIFF* tif, int isimage, int imagedone, uint64* pdiroff)
                  * in the previous steps as the "rawcc" data may well be
                  * a previously read tile/strip in mixed read/write mode.
 		 */
-		if (tif->tif_rawcc > 0 && tif->tif_rawcc != orig_rawcc
+		if (((tif->tif_rawcc > 0) && (tif->tif_rawcc != 0))
 		    && (tif->tif_flags & TIFF_BEENWRITING) != 0
 		    && !TIFFFlushData1(tif))
 		{

10: -manual\
--- "a/C:\\Users\\UROS\\Documents\\GitHub\\APR-PQA\\0. Data_Sources\\scripts\\Chunk_And_Lines\\..\\ManyBugs_Result_19_VCXProjects\\angelix-libtiff-865f7-buggy\\tif_dirwrite.c"	
+++ "b/C:\\Users\\UROS\\Documents\\GitHub\\APR-PQA\\0. Data_Sources\\scripts\\Chunk_And_Lines\\..\\ManyBugs_Result_19_VCXProjects\\angelix-libtiff-865f7-manual\\tif_dirwrite.c"	
@@ -323,8 +323,6 @@ TIFFWriteDirectorySec(TIFF* tif, int isimage, int imagedone, uint64* pdiroff)
 	 */
 	if (imagedone)
 	{
-                tmsize_t orig_rawcc = tif->tif_rawcc;
-
 		if (tif->tif_flags & TIFF_POSTENCODE)
 		{
 			tif->tif_flags &= ~TIFF_POSTENCODE;
@@ -338,12 +336,9 @@ TIFFWriteDirectorySec(TIFF* tif, int isimage, int imagedone, uint64* pdiroff)
 		(*tif->tif_close)(tif);       /* shutdown encoder */
 		/*
 		 * Flush any data that might have been written
-		 * by the compression close+cleanup routines.  But
-                 * be careful not to write stuff if we didn't add data
-                 * in the previous steps as the "rawcc" data may well be
-                 * a previously read tile/strip in mixed read/write mode.
+		 * by the compression close+cleanup routines.
 		 */
-		if (tif->tif_rawcc > 0 && tif->tif_rawcc != orig_rawcc
+		if (tif->tif_rawcc > 0
 		    && (tif->tif_flags & TIFF_BEENWRITING) != 0
 		    && !TIFFFlushData1(tif))
 		{

11: -auto\
--- "a/C:\\Users\\UROS\\Documents\\GitHub\\APR-PQA\\0. Data_Sources\\scripts\\Chunk_And_Lines\\..\\ManyBugs_Result_19_VCXProjects\\angelix-php-2adf5-buggy\\php_date.c"	
+++ "b/C:\\Users\\UROS\\Documents\\GitHub\\APR-PQA\\0. Data_Sources\\scripts\\Chunk_And_Lines\\..\\ManyBugs_Result_19_VCXProjects\\angelix-php-2adf5-auto\\php_date.c"	
@@ -3762,7 +3762,7 @@ PHP_METHOD(DatePeriod, __construct)
 	dpobj = zend_object_store_get_object(getThis() TSRMLS_CC);
 	dpobj->current = NULL;
 
-	if (isostr_len) {
+	if ((! (dpobj == 0))) {
 		date_period_initialize(&(dpobj->start), &(dpobj->end), &(dpobj->interval), &recurrences, isostr, isostr_len TSRMLS_CC);
 		if (dpobj->start == NULL) {
 			php_error_docref(NULL TSRMLS_CC, E_WARNING, "The ISO interval '%s' did not contain a start date.", isostr);

12: -manual\
--- "a/C:\\Users\\UROS\\Documents\\GitHub\\APR-PQA\\0. Data_Sources\\scripts\\Chunk_And_Lines\\..\\ManyBugs_Result_19_VCXProjects\\angelix-php-2adf5-buggy\\php_date.c"	
+++ "b/C:\\Users\\UROS\\Documents\\GitHub\\APR-PQA\\0. Data_Sources\\scripts\\Chunk_And_Lines\\..\\ManyBugs_Result_19_VCXProjects\\angelix-php-2adf5-manual\\php_date.c"	
@@ -3762,7 +3762,7 @@ PHP_METHOD(DatePeriod, __construct)
 	dpobj = zend_object_store_get_object(getThis() TSRMLS_CC);
 	dpobj->current = NULL;
 
-	if (isostr_len) {
+	if (isostr) {
 		date_period_initialize(&(dpobj->start), &(dpobj->end), &(dpobj->interval), &recurrences, isostr, isostr_len TSRMLS_CC);
 		if (dpobj->start == NULL) {
 			php_error_docref(NULL TSRMLS_CC, E_WARNING, "The ISO interval '%s' did not contain a start date.", isostr);

13: -auto\
--- "a/C:\\Users\\UROS\\Documents\\GitHub\\APR-PQA\\0. Data_Sources\\scripts\\Chunk_And_Lines\\..\\ManyBugs_Result_19_VCXProjects\\prophet-gzip-f17cb-buggy\\gzip.c"	
+++ "b/C:\\Users\\UROS\\Documents\\GitHub\\APR-PQA\\0. Data_Sources\\scripts\\Chunk_And_Lines\\..\\ManyBugs_Result_19_VCXProjects\\prophet-gzip-f17cb-auto\\gzip.c"	
@@ -649,6 +649,8 @@ local void treat_stdin()
 
     clear_bufs(); /* clear input and output buffers */
     to_stdout = 1;
+    //prophet generated patch
+    ifd = (0);
     part_nb = 0;
 
     if (decompress) {

14: -manual\
--- "a/C:\\Users\\UROS\\Documents\\GitHub\\APR-PQA\\0. Data_Sources\\scripts\\Chunk_And_Lines\\..\\ManyBugs_Result_19_VCXProjects\\prophet-gzip-f17cb-buggy\\gzip.c"	
+++ "b/C:\\Users\\UROS\\Documents\\GitHub\\APR-PQA\\0. Data_Sources\\scripts\\Chunk_And_Lines\\..\\ManyBugs_Result_19_VCXProjects\\prophet-gzip-f17cb-manual\\gzip.c"	
@@ -650,6 +650,7 @@ local void treat_stdin()
     clear_bufs(); /* clear input and output buffers */
     to_stdout = 1;
     part_nb = 0;
+    ifd = fileno(stdin);
 
     if (decompress) {
 	method = get_method(ifd);

15: -auto\
--- "a/C:\\Users\\UROS\\Documents\\GitHub\\APR-PQA\\0. Data_Sources\\scripts\\Chunk_And_Lines\\..\\ManyBugs_Result_19_VCXProjects\\prophet-libtiff-2e42d-buggy\\tiffcrop.c"	
+++ "b/C:\\Users\\UROS\\Documents\\GitHub\\APR-PQA\\0. Data_Sources\\scripts\\Chunk_And_Lines\\..\\ManyBugs_Result_19_VCXProjects\\prophet-libtiff-2e42d-auto\\tiffcrop.c"	
@@ -1,3 +1,4 @@
+#include <string.h>
 /* $Id$ */
 
 /* tiffcrop.c -- a port of tiffcp.c extended to include manipulations of
@@ -2025,7 +2026,8 @@ main(int argc, char* argv[])
       if (getCropOffsets(&image, &crop, &dump))
         {
         TIFFError("main", "Unable to define crop regions");
-        exit (-1);
+        //prophet generated patch
+        exit((end_of_input + seg));
 	}
 
       if (crop.selections > 0)

16: -manual\
--- "a/C:\\Users\\UROS\\Documents\\GitHub\\APR-PQA\\0. Data_Sources\\scripts\\Chunk_And_Lines\\..\\ManyBugs_Result_19_VCXProjects\\prophet-libtiff-2e42d-buggy\\tiffcrop.c"	
+++ "b/C:\\Users\\UROS\\Documents\\GitHub\\APR-PQA\\0. Data_Sources\\scripts\\Chunk_And_Lines\\..\\ManyBugs_Result_19_VCXProjects\\prophet-libtiff-2e42d-manual\\tiffcrop.c"	
@@ -4966,7 +4966,7 @@ loadImage(TIFF* in, struct image_data *image, struct dump_opts * dump, unsigned
   TIFFGetField(in, TIFFTAG_IMAGELENGTH, &length);
   TIFFGetField(in, TIFFTAG_XRESOLUTION, &xres);
   TIFFGetField(in, TIFFTAG_YRESOLUTION, &yres);
-  TIFFGetFieldDefaulted(in, TIFFTAG_RESOLUTIONUNIT, &res_unit);
+  TIFFGetField(in, TIFFTAG_RESOLUTIONUNIT, &res_unit);
   scanlinesize = TIFFScanlineSize(in);
 
   image->bps = bps;

17: -auto\
--- "a/C:\\Users\\UROS\\Documents\\GitHub\\APR-PQA\\0. Data_Sources\\scripts\\Chunk_And_Lines\\..\\ManyBugs_Result_19_VCXProjects\\prophet-libtiff-865f7-buggy\\tif_dirwrite.c"	
+++ "b/C:\\Users\\UROS\\Documents\\GitHub\\APR-PQA\\0. Data_Sources\\scripts\\Chunk_And_Lines\\..\\ManyBugs_Result_19_VCXProjects\\prophet-libtiff-865f7-auto\\tif_dirwrite.c"	
@@ -343,13 +343,11 @@ TIFFWriteDirectorySec(TIFF* tif, int isimage, int imagedone, uint64* pdiroff)
                  * in the previous steps as the "rawcc" data may well be
                  * a previously read tile/strip in mixed read/write mode.
 		 */
-		if (tif->tif_rawcc > 0 && tif->tif_rawcc != orig_rawcc
-		    && (tif->tif_flags & TIFF_BEENWRITING) != 0
-		    && !TIFFFlushData1(tif))
-		{
-			TIFFErrorExt(tif->tif_clientdata, module,
-			    "Error flushing data before directory write");
-			return (0);
+		//prophet generated patch
+		tif->tif_rawcc = (615);
+		if (tif->tif_rawcc > 0 && tif->tif_rawcc != orig_rawcc && (tif->tif_flags & 64) != 0 && !TIFFFlushData1(tif)) {
+		    TIFFErrorExt(tif->tif_clientdata, module, "Error flushing data before directory write");
+		    return (0);
 		}
 		if ((tif->tif_flags & TIFF_MYBUFFER) && tif->tif_rawdata)
 		{

18: -auto-1\
--- "a/C:\\Users\\UROS\\Documents\\GitHub\\APR-PQA\\0. Data_Sources\\scripts\\Chunk_And_Lines\\..\\ManyBugs_Result_19_VCXProjects\\prophet-libtiff-865f7-buggy\\tif_dirwrite.c"	
+++ "b/C:\\Users\\UROS\\Documents\\GitHub\\APR-PQA\\0. Data_Sources\\scripts\\Chunk_And_Lines\\..\\ManyBugs_Result_19_VCXProjects\\prophet-libtiff-865f7-auto-1\\tif_dirwrite.c"	
@@ -343,13 +343,16 @@ TIFFWriteDirectorySec(TIFF* tif, int isimage, int imagedone, uint64* pdiroff)
                  * in the previous steps as the "rawcc" data may well be
                  * a previously read tile/strip in mixed read/write mode.
 		 */
-		if (tif->tif_rawcc > 0 && tif->tif_rawcc != orig_rawcc
-		    && (tif->tif_flags & TIFF_BEENWRITING) != 0
-		    && !TIFFFlushData1(tif))
-		{
-			TIFFErrorExt(tif->tif_clientdata, module,
-			    "Error flushing data before directory write");
-			return (0);
+		//prophet generated patch
+		if (imagedone) {
+		    TIFFFreeDirectory(tif);
+		    tif->tif_flags &= ~8;
+		    (*tif->tif_cleanup)(tif);
+		    TIFFCreateDirectory(tif);
+		}
+		if (tif->tif_rawcc > 0 && tif->tif_rawcc != orig_rawcc && (tif->tif_flags & 64) != 0 && !TIFFFlushData1(tif)) {
+		    TIFFErrorExt(tif->tif_clientdata, module, "Error flushing data before directory write");
+		    return (0);
 		}
 		if ((tif->tif_flags & TIFF_MYBUFFER) && tif->tif_rawdata)
 		{

19: -manual\
--- "a/C:\\Users\\UROS\\Documents\\GitHub\\APR-PQA\\0. Data_Sources\\scripts\\Chunk_And_Lines\\..\\ManyBugs_Result_19_VCXProjects\\prophet-libtiff-865f7-buggy\\tif_dirwrite.c"	
+++ "b/C:\\Users\\UROS\\Documents\\GitHub\\APR-PQA\\0. Data_Sources\\scripts\\Chunk_And_Lines\\..\\ManyBugs_Result_19_VCXProjects\\prophet-libtiff-865f7-manual\\tif_dirwrite.c"	
@@ -323,8 +323,6 @@ TIFFWriteDirectorySec(TIFF* tif, int isimage, int imagedone, uint64* pdiroff)
 	 */
 	if (imagedone)
 	{
-                tmsize_t orig_rawcc = tif->tif_rawcc;
-
 		if (tif->tif_flags & TIFF_POSTENCODE)
 		{
 			tif->tif_flags &= ~TIFF_POSTENCODE;
@@ -338,12 +336,9 @@ TIFFWriteDirectorySec(TIFF* tif, int isimage, int imagedone, uint64* pdiroff)
 		(*tif->tif_close)(tif);       /* shutdown encoder */
 		/*
 		 * Flush any data that might have been written
-		 * by the compression close+cleanup routines.  But
-                 * be careful not to write stuff if we didn't add data
-                 * in the previous steps as the "rawcc" data may well be
-                 * a previously read tile/strip in mixed read/write mode.
+		 * by the compression close+cleanup routines.
 		 */
-		if (tif->tif_rawcc > 0 && tif->tif_rawcc != orig_rawcc
+		if (tif->tif_rawcc > 0
 		    && (tif->tif_flags & TIFF_BEENWRITING) != 0
 		    && !TIFFFlushData1(tif))
 		{

20: -manual-1\
--- "a/C:\\Users\\UROS\\Documents\\GitHub\\APR-PQA\\0. Data_Sources\\scripts\\Chunk_And_Lines\\..\\ManyBugs_Result_19_VCXProjects\\prophet-libtiff-865f7-buggy\\tif_dirwrite.c"	
+++ "b/C:\\Users\\UROS\\Documents\\GitHub\\APR-PQA\\0. Data_Sources\\scripts\\Chunk_And_Lines\\..\\ManyBugs_Result_19_VCXProjects\\prophet-libtiff-865f7-manual-1\\tif_dirwrite.c"	
@@ -323,8 +323,6 @@ TIFFWriteDirectorySec(TIFF* tif, int isimage, int imagedone, uint64* pdiroff)
 	 */
 	if (imagedone)
 	{
-                tmsize_t orig_rawcc = tif->tif_rawcc;
-
 		if (tif->tif_flags & TIFF_POSTENCODE)
 		{
 			tif->tif_flags &= ~TIFF_POSTENCODE;
@@ -338,12 +336,9 @@ TIFFWriteDirectorySec(TIFF* tif, int isimage, int imagedone, uint64* pdiroff)
 		(*tif->tif_close)(tif);       /* shutdown encoder */
 		/*
 		 * Flush any data that might have been written
-		 * by the compression close+cleanup routines.  But
-                 * be careful not to write stuff if we didn't add data
-                 * in the previous steps as the "rawcc" data may well be
-                 * a previously read tile/strip in mixed read/write mode.
+		 * by the compression close+cleanup routines.
 		 */
-		if (tif->tif_rawcc > 0 && tif->tif_rawcc != orig_rawcc
+		if (tif->tif_rawcc > 0
 		    && (tif->tif_flags & TIFF_BEENWRITING) != 0
 		    && !TIFFFlushData1(tif))
 		{

21: -auto\
--- "a/C:\\Users\\UROS\\Documents\\GitHub\\APR-PQA\\0. Data_Sources\\scripts\\Chunk_And_Lines\\..\\ManyBugs_Result_19_VCXProjects\\prophet-lighttpd-2662-buggy\\mod_accesslog.c"	
+++ "b/C:\\Users\\UROS\\Documents\\GitHub\\APR-PQA\\0. Data_Sources\\scripts\\Chunk_And_Lines\\..\\ManyBugs_Result_19_VCXProjects\\prophet-lighttpd-2662-auto\\mod_accesslog.c"	
@@ -165,7 +165,7 @@ INIT_FUNC(mod_accesslog_init) {
 
 static void accesslog_append_escaped(buffer *dest, buffer *str) {
 	/* replaces non-printable chars with \xHH where HH is the hex representation of the byte */
-	/* exceptions: " => \", \ => \\, whitespace chars => \n \t etc. */
+if (0 == 1) return;
 	buffer_prepare_append(dest, str->used - 1);
 
 	for (unsigned int i = 0; i < str->used - 1; i++) {
@@ -197,6 +197,8 @@ static void accesslog_append_escaped(buffer *dest, buffer *str) {
 		default: {
 				/* non printable char => \xHH */
 				char hh[5] = {'\\','x',0,0,0};
+				//prophet generated patch
+				buffer_append_string_len((str), &str->ptr[i], 1);
 				char h = str->ptr[i] / 16;
 				hh[2] = (h > 9) ? (h - 10 + 'A') : (h + '0');
 				h = str->ptr[i] % 16;

22: -manual\
--- "a/C:\\Users\\UROS\\Documents\\GitHub\\APR-PQA\\0. Data_Sources\\scripts\\Chunk_And_Lines\\..\\ManyBugs_Result_19_VCXProjects\\prophet-lighttpd-2662-buggy\\mod_accesslog.c"	
+++ "b/C:\\Users\\UROS\\Documents\\GitHub\\APR-PQA\\0. Data_Sources\\scripts\\Chunk_And_Lines\\..\\ManyBugs_Result_19_VCXProjects\\prophet-lighttpd-2662-manual\\mod_accesslog.c"	
@@ -166,6 +166,7 @@ INIT_FUNC(mod_accesslog_init) {
 static void accesslog_append_escaped(buffer *dest, buffer *str) {
 	/* replaces non-printable chars with \xHH where HH is the hex representation of the byte */
 	/* exceptions: " => \", \ => \\, whitespace chars => \n \t etc. */
+	if (str->used == 0) return;
 	buffer_prepare_append(dest, str->used - 1);
 
 	for (unsigned int i = 0; i < str->used - 1; i++) {

23: -auto\
--- "a/C:\\Users\\UROS\\Documents\\GitHub\\APR-PQA\\0. Data_Sources\\scripts\\Chunk_And_Lines\\..\\ManyBugs_Result_19_VCXProjects\\prophet-php-3acdc-buggy\\phar_object.c"	
+++ "b/C:\\Users\\UROS\\Documents\\GitHub\\APR-PQA\\0. Data_Sources\\scripts\\Chunk_And_Lines\\..\\ManyBugs_Result_19_VCXProjects\\prophet-php-3acdc-auto\\phar_object.c"	
@@ -629,19 +629,22 @@ carry_on:
 		}
 
 		return;
-	} else if (SUCCESS == zend_hash_find(&(PHAR_GLOBALS->phar_fname_map), fname, fname_len, (void **)&pphar)) {
-		goto carry_on;
-	} else if (PHAR_G(manifest_cached) && SUCCESS == zend_hash_find(&cached_phars, fname, fname_len, (void **)&pphar)) {
-		if (SUCCESS == phar_copy_on_write(pphar TSRMLS_CC)) {
-			goto carry_on;
-		}
-
-		goto carry_on;
-	} else if (SUCCESS == phar_split_fname(path, path_len, &arch, &arch_len, &entry, &entry_len, 2, 0 TSRMLS_CC)) {
-		path = entry;
-		path_len = entry_len;
-		goto carry_on2;
-	}
+	} else //prophet generated patch
+{
+    phar_request_initialize();
+    if (0 == zend_hash_find(&((&phar_globals)->phar_fname_map), fname, fname_len, (void **)&pphar)) {
+        goto carry_on;
+    } else if ((phar_globals.manifest_cached) && 0 == zend_hash_find(&cached_phars, fname, fname_len, (void **)&pphar)) {
+        if (0 == phar_copy_on_write(pphar)) {
+            goto carry_on;
+        }
+        goto carry_on;
+    } else if (0 == phar_split_fname(path, path_len, &arch, &arch_len, &entry, &entry_len, 2, 0)) {
+        path = entry;
+        path_len = entry_len;
+        goto carry_on2;
+    }
+}
 
 	zend_throw_exception_ex(phar_ce_PharException, 0 TSRMLS_CC, "Mounting of %s to %s failed", path, actual);
 }

24: -manual\
--- "a/C:\\Users\\UROS\\Documents\\GitHub\\APR-PQA\\0. Data_Sources\\scripts\\Chunk_And_Lines\\..\\ManyBugs_Result_19_VCXProjects\\prophet-php-3acdc-buggy\\phar_object.c"	
+++ "b/C:\\Users\\UROS\\Documents\\GitHub\\APR-PQA\\0. Data_Sources\\scripts\\Chunk_And_Lines\\..\\ManyBugs_Result_19_VCXProjects\\prophet-php-3acdc-manual\\phar_object.c"	
@@ -629,7 +629,7 @@ carry_on:
 		}
 
 		return;
-	} else if (SUCCESS == zend_hash_find(&(PHAR_GLOBALS->phar_fname_map), fname, fname_len, (void **)&pphar)) {
+	} else if (PHAR_GLOBALS->phar_fname_map.arBuckets && SUCCESS == zend_hash_find(&(PHAR_GLOBALS->phar_fname_map), fname, fname_len, (void **)&pphar)) {
 		goto carry_on;
 	} else if (PHAR_G(manifest_cached) && SUCCESS == zend_hash_find(&cached_phars, fname, fname_len, (void **)&pphar)) {
 		if (SUCCESS == phar_copy_on_write(pphar TSRMLS_CC)) {

25: -auto\
--- "a/C:\\Users\\UROS\\Documents\\GitHub\\APR-PQA\\0. Data_Sources\\scripts\\Chunk_And_Lines\\..\\ManyBugs_Result_19_VCXProjects\\prophet-php-821d7-buggy\\zend_closures.c"	
+++ "b/C:\\Users\\UROS\\Documents\\GitHub\\APR-PQA\\0. Data_Sources\\scripts\\Chunk_And_Lines\\..\\ManyBugs_Result_19_VCXProjects\\prophet-php-821d7-auto\\zend_closures.c"	
@@ -1,3 +1,4 @@
+#include <string.h>
 /*
    +
26: -manual\
--- "a/C:\\Users\\UROS\\Documents\\GitHub\\APR-PQA\\0. Data_Sources\\scripts\\Chunk_And_Lines\\..\\ManyBugs_Result_19_VCXProjects\\prophet-php-821d7-buggy\\zend_closures.c"	
+++ "b/C:\\Users\\UROS\\Documents\\GitHub\\APR-PQA\\0. Data_Sources\\scripts\\Chunk_And_Lines\\..\\ManyBugs_Result_19_VCXProjects\\prophet-php-821d7-manual\\zend_closures.c"	
@@ -407,6 +407,7 @@ ZEND_API void zend_create_closure(zval *res, zend_function *func, zend_class_ent
 	closure = (zend_closure *)zend_object_store_get_object(res TSRMLS_CC);
 
 	closure->func = *func;
+	closure->func.common.prototype = NULL;
 
 	if (closure->func.type == ZEND_USER_FUNCTION) {
 		if (closure->func.op_array.static_variables) {

27: -auto\
--- "a/C:\\Users\\UROS\\Documents\\GitHub\\APR-PQA\\0. Data_Sources\\scripts\\Chunk_And_Lines\\..\\ManyBugs_Result_19_VCXProjects\\prophet-php-b8496-buggy\\zend_execute.c"	
+++ "b/C:\\Users\\UROS\\Documents\\GitHub\\APR-PQA\\0. Data_Sources\\scripts\\Chunk_And_Lines\\..\\ManyBugs_Result_19_VCXProjects\\prophet-php-b8496-auto\\zend_execute.c"	
@@ -1,3 +1,4 @@
+#include <string.h>
 /*
    +
28: -manual\
--- "a/C:\\Users\\UROS\\Documents\\GitHub\\APR-PQA\\0. Data_Sources\\scripts\\Chunk_And_Lines\\..\\ManyBugs_Result_19_VCXProjects\\prophet-php-b8496-buggy\\zend_execute.c"	
+++ "b/C:\\Users\\UROS\\Documents\\GitHub\\APR-PQA\\0. Data_Sources\\scripts\\Chunk_And_Lines\\..\\ManyBugs_Result_19_VCXProjects\\prophet-php-b8496-manual\\zend_execute.c"	
@@ -1258,7 +1258,9 @@ static void zend_fetch_dimension_address_read(temp_variable *result, zval **cont
 				Z_TYPE_P(ptr) = IS_STRING;
 
 				if (Z_LVAL_P(dim) < 0 || Z_STRLEN_P(container) <= Z_LVAL_P(dim)) {
-					zend_error(E_NOTICE, "Uninitialized string offset: %ld", Z_LVAL_P(dim));
+					if (type != BP_VAR_IS) {
+						zend_error(E_NOTICE, "Uninitialized string offset: %ld", Z_LVAL_P(dim));
+					}
 					Z_STRVAL_P(ptr) = STR_EMPTY_ALLOC();
 					Z_STRLEN_P(ptr) = 0;
 				} else {

29: -auto\
--- "a/C:\\Users\\UROS\\Documents\\GitHub\\APR-PQA\\0. Data_Sources\\scripts\\Chunk_And_Lines\\..\\ManyBugs_Result_19_VCXProjects\\prophet-php-d3b20-buggy\\phar.c"	
+++ "b/C:\\Users\\UROS\\Documents\\GitHub\\APR-PQA\\0. Data_Sources\\scripts\\Chunk_And_Lines\\..\\ManyBugs_Result_19_VCXProjects\\prophet-php-d3b20-auto\\phar.c"	
@@ -1,3 +1,4 @@
+#include <string.h>
 /*
   +
30: -manual\
--- "a/C:\\Users\\UROS\\Documents\\GitHub\\APR-PQA\\0. Data_Sources\\scripts\\Chunk_And_Lines\\..\\ManyBugs_Result_19_VCXProjects\\prophet-php-d3b20-buggy\\phar.c"	
+++ "b/C:\\Users\\UROS\\Documents\\GitHub\\APR-PQA\\0. Data_Sources\\scripts\\Chunk_And_Lines\\..\\ManyBugs_Result_19_VCXProjects\\prophet-php-d3b20-manual\\phar.c"	
@@ -1570,8 +1570,8 @@ static int phar_open_from_fp(php_stream* fp, char *fname, int fname_len, char *a
 	const char gz_magic[] = "\x1f\x8b\x08";
 	const char bz_magic[] = "BZh";
 	char *pos, test = '\0';
-	const int window_size = 1024 + sizeof(token);
-	char buffer[1024 + sizeof(token)]; /* a 1024 byte window + the size of the halt_compiler token (moving window) */
+	const int window_size = 1024;
+	char buffer[window_size + sizeof(token)]; /* a 1024 byte window + the size of the halt_compiler token (moving window) */
 	const long readsize = sizeof(buffer) - sizeof(token);
 	const long tokenlen = sizeof(token) - 1;
 	long halt_offset;

31: -auto\
--- "a/C:\\Users\\UROS\\Documents\\GitHub\\APR-PQA\\0. Data_Sources\\scripts\\Chunk_And_Lines\\..\\ManyBugs_Result_19_VCXProjects\\prophet-php-d4ae4-buggy\\json.c"	
+++ "b/C:\\Users\\UROS\\Documents\\GitHub\\APR-PQA\\0. Data_Sources\\scripts\\Chunk_And_Lines\\..\\ManyBugs_Result_19_VCXProjects\\prophet-php-d4ae4-auto\\json.c"	
@@ -297,7 +297,8 @@ static void json_encode_array(smart_str *buf, zval **val, int options TSRMLS_DC)
 
 						json_pretty_print_indent(buf, options TSRMLS_CC);
 
-						json_escape_string(buf, key, key_len - 1, options TSRMLS_CC);
+						//prophet generated patch
+						json_escape_string(buf, key, key_len - 1, (r + index));
 						smart_str_appendc(buf, ':');
 
 						json_pretty_print_char(buf, options, ' ' TSRMLS_CC);

32: -manual\
--- "a/C:\\Users\\UROS\\Documents\\GitHub\\APR-PQA\\0. Data_Sources\\scripts\\Chunk_And_Lines\\..\\ManyBugs_Result_19_VCXProjects\\prophet-php-d4ae4-buggy\\json.c"	
+++ "b/C:\\Users\\UROS\\Documents\\GitHub\\APR-PQA\\0. Data_Sources\\scripts\\Chunk_And_Lines\\..\\ManyBugs_Result_19_VCXProjects\\prophet-php-d4ae4-manual\\json.c"	
@@ -297,7 +297,7 @@ static void json_encode_array(smart_str *buf, zval **val, int options TSRMLS_DC)
 
 						json_pretty_print_indent(buf, options TSRMLS_CC);
 
-						json_escape_string(buf, key, key_len - 1, options TSRMLS_CC);
+						json_escape_string(buf, key, key_len - 1, options & ~PHP_JSON_NUMERIC_CHECK TSRMLS_CC);
 						smart_str_appendc(buf, ':');
 
 						json_pretty_print_char(buf, options, ' ' TSRMLS_CC);

33: -auto\
--- "a/C:\\Users\\UROS\\Documents\\GitHub\\APR-PQA\\0. Data_Sources\\scripts\\Chunk_And_Lines\\..\\ManyBugs_Result_19_VCXProjects\\prophet-php-daecb-buggy\\zend_constants.c"	
+++ "b/C:\\Users\\UROS\\Documents\\GitHub\\APR-PQA\\0. Data_Sources\\scripts\\Chunk_And_Lines\\..\\ManyBugs_Result_19_VCXProjects\\prophet-php-daecb-auto\\zend_constants.c"	
@@ -141,7 +141,8 @@ void zend_register_standard_constants(TSRMLS_D)
 		c.value.type = IS_NULL;
 		zend_register_constant(&c TSRMLS_CC);
 
-		c.flags = CONST_PERSISTENT | CONST_CS;
+		//prophet generated patch
+		c.flags = (1 << 1) | ((0) << 0);
 
 		c.name = zend_strndup(ZEND_STRL("ZEND_THREAD_SAFE"));
 		c.name_len = sizeof("ZEND_THREAD_SAFE");

34: -manual\
--- "a/C:\\Users\\UROS\\Documents\\GitHub\\APR-PQA\\0. Data_Sources\\scripts\\Chunk_And_Lines\\..\\ManyBugs_Result_19_VCXProjects\\prophet-php-daecb-buggy\\zend_constants.c"	
+++ "b/C:\\Users\\UROS\\Documents\\GitHub\\APR-PQA\\0. Data_Sources\\scripts\\Chunk_And_Lines\\..\\ManyBugs_Result_19_VCXProjects\\prophet-php-daecb-manual\\zend_constants.c"	
@@ -141,7 +141,7 @@ void zend_register_standard_constants(TSRMLS_D)
 		c.value.type = IS_NULL;
 		zend_register_constant(&c TSRMLS_CC);
 
-		c.flags = CONST_PERSISTENT | CONST_CS;
+		c.flags = CONST_PERSISTENT;
 
 		c.name = zend_strndup(ZEND_STRL("ZEND_THREAD_SAFE"));
 		c.name_len = sizeof("ZEND_THREAD_SAFE");

35: -auto\
--- "a/C:\\Users\\UROS\\Documents\\GitHub\\APR-PQA\\0. Data_Sources\\scripts\\Chunk_And_Lines\\..\\ManyBugs_Result_19_VCXProjects\\prophet-php-f330c-buggy\\phar.c"	
+++ "b/C:\\Users\\UROS\\Documents\\GitHub\\APR-PQA\\0. Data_Sources\\scripts\\Chunk_And_Lines\\..\\ManyBugs_Result_19_VCXProjects\\prophet-php-f330c-auto\\phar.c"	
@@ -1,3 +1,4 @@
+#include <string.h>
 /*
   +
36: -manual\
--- "a/C:\\Users\\UROS\\Documents\\GitHub\\APR-PQA\\0. Data_Sources\\scripts\\Chunk_And_Lines\\..\\ManyBugs_Result_19_VCXProjects\\prophet-php-f330c-buggy\\phar.c"	
+++ "b/C:\\Users\\UROS\\Documents\\GitHub\\APR-PQA\\0. Data_Sources\\scripts\\Chunk_And_Lines\\..\\ManyBugs_Result_19_VCXProjects\\prophet-php-f330c-manual\\phar.c"	
@@ -1570,7 +1570,7 @@ static int phar_open_from_fp(php_stream* fp, char *fname, int fname_len, char *a
 	const char gz_magic[] = "\x1f\x8b\x08";
 	const char bz_magic[] = "BZh";
 	char *pos, test = '\0';
-	const int window_size = 1024 + sizeof(token);
+	const int window_size = 1024;
 	char buffer[1024 + sizeof(token)]; /* a 1024 byte window + the size of the halt_compiler token (moving window) */
 	const long readsize = sizeof(buffer) - sizeof(token);
 	const long tokenlen = sizeof(token) - 1;

37: -auto\
--- "a/C:\\Users\\UROS\\Documents\\GitHub\\APR-PQA\\0. Data_Sources\\scripts\\Chunk_And_Lines\\..\\ManyBugs_Result_19_VCXProjects\\prophet-python-69935-buggy\\signalmodule.c"	
+++ "b/C:\\Users\\UROS\\Documents\\GitHub\\APR-PQA\\0. Data_Sources\\scripts\\Chunk_And_Lines\\..\\ManyBugs_Result_19_VCXProjects\\prophet-python-69935-auto\\signalmodule.c"	
@@ -184,7 +184,10 @@ trip_signal(int sig_num)
     is_tripped = 1;
     Py_AddPendingCall(checksignals_witharg, NULL);
     if (wakeup_fd != -1)
-        write(wakeup_fd, "\0", 1);
+        //prophet generated patch
+        {
+            write(wakeup_fd, (&sig_num), 1);
+        }
 }
 
 static void

38: -manual\
--- "a/C:\\Users\\UROS\\Documents\\GitHub\\APR-PQA\\0. Data_Sources\\scripts\\Chunk_And_Lines\\..\\ManyBugs_Result_19_VCXProjects\\prophet-python-69935-buggy\\signalmodule.c"	
+++ "b/C:\\Users\\UROS\\Documents\\GitHub\\APR-PQA\\0. Data_Sources\\scripts\\Chunk_And_Lines\\..\\ManyBugs_Result_19_VCXProjects\\prophet-python-69935-manual\\signalmodule.c"	
@@ -176,6 +176,7 @@ checksignals_witharg(void * unused)
 static void
 trip_signal(int sig_num)
 {
+    unsigned char byte;
     Handlers[sig_num].tripped = 1;
     if (is_tripped)
         return;
@@ -183,8 +184,10 @@ trip_signal(int sig_num)
        cleared in PyErr_CheckSignals() before .tripped. */
     is_tripped = 1;
     Py_AddPendingCall(checksignals_witharg, NULL);
-    if (wakeup_fd != -1)
-        write(wakeup_fd, "\0", 1);
+    if (wakeup_fd != -1) {
+        byte = (unsigned char)sig_num;
+        write(wakeup_fd, &byte, 1);
+    }
 }
 
 static void

